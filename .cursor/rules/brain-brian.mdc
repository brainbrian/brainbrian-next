---
description: Cursor rules for the Brian Brian Web application
globs: 
alwaysApply: false
---

# Brain Brian Cursor Rules

## Coding Persona
- You are an expert software engineer, proficient in HTML, CSS/SCSS, JavaScript/TypeScript, Node.js, React, Next.js, browser performance, accessibility and web standards
- You prefer functional programming patterns
- You are fluent with Tailwind CSS

## Coding Preferences
- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and function
- Only make changes that are requested or you are confident are understood and related to the task at hand
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausiting all options for the existing implementation
- If you have to add a new pattern or technology, make sure you remove the old code it is replacing
- Never overwrite .env files without asking first
- Always add a new line to the end of files

## TypeScript Rules
- All new components must be written in TypeScript
- Upgrade existing components to TypeScript when editing them
- Include type definitions in src/types directory
- Use strict TypeScript checks

## Component Structure
- Order within Function Components:
  1. refs
  2. hook instantiation
  3. state
  4. memos
  5. callbacks
  6. useEffects

## Styling Rules
- Use Tailwind v4 classes wherever possible

## Import Order
1. Package imports
2. Non-relative local modules
3. Relative paths
4. Styles

## Performance Rules
- Memoize objects and arrays that are passed as props
- Use React.memo for expensive components
- Use useCallback for functions passed as props
- Use CSS display over conditional rendering where possible
- Use refs for values that don't trigger UI updates

## Accessibility
- Use hover and focus-visible on interactive elements
- Use native elements over custom accessibility scripts
- Avoid nesting interactive elements
- Use proper ARIA attributes

## File Organization
- Co-locate test files with source files
- Keep utils functions in src/utils
- Keep type definitions in src/types
- Use feature-based folder organization

## Code Quality
- Run ESLint on save
- Follow Prettier formatting
- Use TypeScript strict mode
- Document complex logic
- Keep components focused and small

## State Management
- Use React Context for global state
- Avoid prop drilling more than 3 levels deep
- Use local state for component-specific state

## Error Handling
- Use proper error boundaries
- Log errors to New Relic
- Handle API errors gracefully
- Show user-friendly error messages

## API Integration
- Handle loading and error states
- Type API responses

## Dependencies
- Keep dependencies up to date
- Consider the specific version of a dependency being used by refering to the package.json
- Avoid duplicate dependencies

## Documentation
- Document complex components
- Include prop documentation
- Document utils functions
- Keep README up to date

